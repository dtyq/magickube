#!/bin/bash
# kubectl-magic-log - 智能 Pod 日志查看插件

set -e

# 交互式 Pod 选择器（核心函数）
_select_pod() {
  local ns="$1" search_keyword="$2"
  echo "当前命名空间: $ns"
  [ -z "$ns" ] && { echo -n "请输入命名空间: "; read ns; }
  
  # 获取 Pod 列表并编号，带状态和年龄信息
  local pod_list=$(kubectl get pods -n "$ns" --no-headers 2>&1)
  if [[ $? -ne 0 ]]; then
    echo "错误: 无法获取 Pod 列表: $pod_list"
    return 1
  fi
  
  if [[ -z "$pod_list" ]]; then
    echo "命名空间 $ns 中没有找到 Pod"
    return 1
  fi
  
  # 如果提供了搜索关键字，过滤 Pod 列表
  if [[ -n "$search_keyword" ]]; then
    local filtered_list=$(echo "$pod_list" | grep -i "$search_keyword")
    
    # 如果过滤后没有结果，使用原始列表
    if [[ -z "$filtered_list" ]]; then
      echo "没有找到包含 '$search_keyword' 的 Pod，显示所有 Pod"
    else
      pod_list="$filtered_list"
    fi
  fi
  
  # 计算 Pod 数量
  local pod_count=$(echo "$pod_list" | wc -l | tr -d ' ')
  
  # 如果只有一个 Pod，自动选择
  if [[ "$pod_count" -eq 1 ]]; then
    local selected=$(echo "$pod_list" | awk '{print $1}')
    SELECTED_POD="$selected"
    return 0
  fi
  
  # 使用新的格式化方式，确保每列对齐
  local pods=$(echo "$pod_list" | \
    awk '{printf "\033[33m%-3s\033[0m \033[36m%-50s\033[0m %-12s %-10s\n", NR, $1, $3, $5}')
  
  # 合并输出 Pod 列表和输入提示
  echo -e "请选择 Pod:\n$pods"
  pod_count=$(echo "$pod_count" | tr -d ' ')  # 再次确保没有空格
  printf "输入编号 (1-%d): " "$pod_count"
  read num
  
  if [[ -z "$num" ]]; then
    echo "未选择 Pod，退出"
    return 1
  fi
  
  # 验证输入是否为有效数字
  if ! [[ "$num" =~ ^[0-9]+$ ]]; then
    echo "错误: 请输入数字"
    return 1
  fi
  
  # 验证输入是否在有效范围内
  if [[ "$num" -lt 1 || "$num" -gt "$pod_count" ]]; then
    echo "错误: 请输入 1-$pod_count 之间的数字"
    return 1
  fi
  
  # 提取选择的 Pod 名称
  local selected=$(echo "$pod_list" | sed -n "${num}p" | awk '{print $1}')
  
  # 定义全局变量存储选择结果
  SELECTED_POD="$selected"
  return 0
}

# 主函数
main() {
  if [ $# -lt 1 ]; then
    echo "用法: kubectl magic log NAMESPACE [POD_NAME_OR_KEYWORD] [-选项]"
    exit 1
  fi
  
  local ns="$1" pod_arg="" pod=""
  shift

  # 如果有第二个参数且不是以 - 开头，则可能是 Pod 名称或搜索关键字
  if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
    pod_arg="$1"
    shift
  fi

  # 检查 pod_arg 是否为准确的 Pod 名称
  if [ -n "$pod_arg" ]; then
    if kubectl get pod "$pod_arg" -n "$ns" &>/dev/null; then
      echo "找到 Pod: $pod_arg"
      pod="$pod_arg"
    else
      # 清空全局变量
      SELECTED_POD=""
      _select_pod "$ns" "$pod_arg"
      if [ $? -ne 0 ] || [ -z "$SELECTED_POD" ]; then
        echo "未能选择有效的 Pod，退出"
        exit 1
      fi
      pod="$SELECTED_POD"
    fi
  else
    # 没有提供 Pod 名称，启动交互式选择
    SELECTED_POD=""
    _select_pod "$ns"
    if [ $? -ne 0 ] || [ -z "$SELECTED_POD" ]; then
      exit 1
    fi
    pod="$SELECTED_POD"
  fi

  # 自动判断容器数量（如果只有一个容器则自动选择）
  echo "获取 Pod \"$pod\" 的容器信息..."
  local container_list=$(kubectl get pod "$pod" -n "$ns" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null)
  if [ -z "$container_list" ]; then
    echo "错误: 无法获取容器列表或 Pod 中没有容器"
    exit 1
  fi
  
  # 计算容器数量
  local container_count=$(echo "$container_list" | wc -w)
  
  local container_opt=""
  if [ "$container_count" -gt 1 ]; then
    echo "Pod 有多个容器，请使用 -c 选项指定容器名称"
  elif [ "$container_count" -eq 1 ]; then
    # 只有一个容器，直接使用它
    local container=$(echo "$container_list" | tr -d '[:space:]')
    if [ -n "$container" ]; then
      container_opt="-c \"$container\""
      echo "使用容器: $container"
    else
      echo "警告: 容器名称为空，尝试不指定容器选项"
    fi
  fi

  # 构建日志命令
  local cmd="kubectl logs -n \"$ns\" $container_opt \"$pod\" $*"
  echo -e "\033[32m▶ 执行命令: $cmd\033[0m"
  eval "$cmd"
}

# 执行主函数
main "$@" 